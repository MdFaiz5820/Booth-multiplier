/* Generated by Yosys 0.33 (git sha1 2584903a060) */

(* dynports =  1  *)
(* top =  1  *)
(* src = "booth_multiplier.v:1.1-43.10" *)
module booth_multiplier(clk, rst, start, multiplicand, multiplier, product, done);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  (* src = "booth_multiplier.v:11.22-11.23" *)
  (* unused_bits = "2" *)
  wire [4:0] A;
  (* src = "booth_multiplier.v:12.24-12.25" *)
  wire [8:0] P;
  (* src = "booth_multiplier.v:11.25-11.26" *)
  (* unused_bits = "2" *)
  wire [4:0] S;
  (* src = "booth_multiplier.v:2.11-2.14" *)
  input clk;
  wire clk;
  (* src = "booth_multiplier.v:13.15-13.20" *)
  wire [4:0] count;
  (* src = "booth_multiplier.v:8.16-8.20" *)
  output done;
  wire done;
  (* src = "booth_multiplier.v:5.26-5.38" *)
  input [3:0] multiplicand;
  wire [3:0] multiplicand;
  (* src = "booth_multiplier.v:6.26-6.36" *)
  input [3:0] multiplier;
  wire [3:0] multiplier;
  (* src = "booth_multiplier.v:7.35-7.42" *)
  output [7:0] product;
  wire [7:0] product;
  (* src = "booth_multiplier.v:3.11-3.14" *)
  input rst;
  wire rst;
  (* src = "booth_multiplier.v:4.11-4.16" *)
  input start;
  wire start;
  INVX1 _094_ (
    .A(done),
    .Y(_072_)
  );
  INVX1 _095_ (
    .A(product[7]),
    .Y(_073_)
  );
  INVX1 _096_ (
    .A(P[7]),
    .Y(_074_)
  );
  INVX1 _097_ (
    .A(product[6]),
    .Y(_075_)
  );
  INVX1 _098_ (
    .A(P[6]),
    .Y(_076_)
  );
  INVX1 _099_ (
    .A(product[5]),
    .Y(_077_)
  );
  INVX1 _100_ (
    .A(P[5]),
    .Y(_078_)
  );
  INVX1 _101_ (
    .A(product[4]),
    .Y(_079_)
  );
  INVX1 _102_ (
    .A(P[4]),
    .Y(_080_)
  );
  INVX1 _103_ (
    .A(product[3]),
    .Y(_081_)
  );
  INVX1 _104_ (
    .A(P[3]),
    .Y(_082_)
  );
  INVX1 _105_ (
    .A(product[2]),
    .Y(_083_)
  );
  INVX1 _106_ (
    .A(P[2]),
    .Y(_084_)
  );
  INVX1 _107_ (
    .A(product[1]),
    .Y(_085_)
  );
  INVX1 _108_ (
    .A(P[1]),
    .Y(_086_)
  );
  INVX1 _109_ (
    .A(product[0]),
    .Y(_087_)
  );
  INVX1 _110_ (
    .A(P[0]),
    .Y(_088_)
  );
  INVX1 _111_ (
    .A(count[4]),
    .Y(_089_)
  );
  INVX1 _112_ (
    .A(rst),
    .Y(_000_)
  );
  INVX1 _113_ (
    .A(start),
    .Y(_090_)
  );
  AND2X1 _114_ (
    .A(P[8]),
    .B(_090_),
    .Y(_045_)
  );
  NOR2X1 _115_ (
    .A(count[3]),
    .B(count[2]),
    .Y(_091_)
  );
  OR2X1 _116_ (
    .A(count[3]),
    .B(count[2]),
    .Y(_092_)
  );
  NOR2X1 _117_ (
    .A(count[4]),
    .B(count[1]),
    .Y(_093_)
  );
  NAND3X1 _118_ (
    .A(count[0]),
    .B(_091_),
    .C(_093_),
    .Y(_046_)
  );
  AOI21X1 _119_ (
    .A(_072_),
    .B(_046_),
    .C(start),
    .Y(_044_)
  );
  NOR2X1 _120_ (
    .A(start),
    .B(_046_),
    .Y(_047_)
  );
  MUX2X1 _121_ (
    .A(_074_),
    .B(_073_),
    .S(_047_),
    .Y(_043_)
  );
  MUX2X1 _122_ (
    .A(_076_),
    .B(_075_),
    .S(_047_),
    .Y(_042_)
  );
  MUX2X1 _123_ (
    .A(_078_),
    .B(_077_),
    .S(_047_),
    .Y(_041_)
  );
  MUX2X1 _124_ (
    .A(_080_),
    .B(_079_),
    .S(_047_),
    .Y(_040_)
  );
  MUX2X1 _125_ (
    .A(_082_),
    .B(_081_),
    .S(_047_),
    .Y(_039_)
  );
  MUX2X1 _126_ (
    .A(_084_),
    .B(_083_),
    .S(_047_),
    .Y(_038_)
  );
  MUX2X1 _127_ (
    .A(_086_),
    .B(_085_),
    .S(_047_),
    .Y(_037_)
  );
  MUX2X1 _128_ (
    .A(_088_),
    .B(_087_),
    .S(_047_),
    .Y(_036_)
  );
  NOR2X1 _129_ (
    .A(count[1]),
    .B(count[0]),
    .Y(_048_)
  );
  OR2X1 _130_ (
    .A(count[1]),
    .B(count[0]),
    .Y(_049_)
  );
  NAND2X1 _131_ (
    .A(_091_),
    .B(_048_),
    .Y(_050_)
  );
  NOR3X1 _132_ (
    .A(count[4]),
    .B(_092_),
    .C(_049_),
    .Y(_051_)
  );
  NAND3X1 _133_ (
    .A(_089_),
    .B(_091_),
    .C(_048_),
    .Y(_052_)
  );
  NAND2X1 _134_ (
    .A(_090_),
    .B(_051_),
    .Y(_053_)
  );
  OAI21X1 _135_ (
    .A(count[4]),
    .B(_050_),
    .C(_045_),
    .Y(_054_)
  );
  OAI21X1 _136_ (
    .A(_074_),
    .B(_053_),
    .C(_054_),
    .Y(_035_)
  );
  OAI21X1 _137_ (
    .A(count[4]),
    .B(_050_),
    .C(_090_),
    .Y(_055_)
  );
  OAI22X1 _138_ (
    .A(_076_),
    .B(_053_),
    .C(_055_),
    .D(_074_),
    .Y(_034_)
  );
  OAI22X1 _139_ (
    .A(_078_),
    .B(_053_),
    .C(_055_),
    .D(_076_),
    .Y(_033_)
  );
  NAND3X1 _140_ (
    .A(P[5]),
    .B(_090_),
    .C(_052_),
    .Y(_056_)
  );
  NAND2X1 _141_ (
    .A(start),
    .B(multiplier[3]),
    .Y(_057_)
  );
  NAND3X1 _142_ (
    .A(P[4]),
    .B(_090_),
    .C(_051_),
    .Y(_058_)
  );
  NAND3X1 _143_ (
    .A(_056_),
    .B(_057_),
    .C(_058_),
    .Y(_032_)
  );
  NAND3X1 _144_ (
    .A(P[4]),
    .B(_090_),
    .C(_052_),
    .Y(_059_)
  );
  NAND2X1 _145_ (
    .A(start),
    .B(multiplier[2]),
    .Y(_060_)
  );
  NAND3X1 _146_ (
    .A(P[3]),
    .B(_090_),
    .C(_051_),
    .Y(_061_)
  );
  NAND3X1 _147_ (
    .A(_059_),
    .B(_060_),
    .C(_061_),
    .Y(_031_)
  );
  NAND3X1 _148_ (
    .A(P[3]),
    .B(_090_),
    .C(_052_),
    .Y(_062_)
  );
  NAND2X1 _149_ (
    .A(start),
    .B(multiplier[1]),
    .Y(_063_)
  );
  NAND3X1 _150_ (
    .A(P[2]),
    .B(_090_),
    .C(_051_),
    .Y(_064_)
  );
  NAND3X1 _151_ (
    .A(_062_),
    .B(_063_),
    .C(_064_),
    .Y(_030_)
  );
  NAND3X1 _152_ (
    .A(P[2]),
    .B(_090_),
    .C(_052_),
    .Y(_065_)
  );
  NAND2X1 _153_ (
    .A(start),
    .B(multiplier[0]),
    .Y(_066_)
  );
  NAND3X1 _154_ (
    .A(P[1]),
    .B(_090_),
    .C(_051_),
    .Y(_067_)
  );
  NAND3X1 _155_ (
    .A(_065_),
    .B(_066_),
    .C(_067_),
    .Y(_029_)
  );
  OAI22X1 _156_ (
    .A(_088_),
    .B(_053_),
    .C(_055_),
    .D(_086_),
    .Y(_028_)
  );
  OAI21X1 _157_ (
    .A(_092_),
    .B(_049_),
    .C(count[4]),
    .Y(_068_)
  );
  NOR2X1 _158_ (
    .A(start),
    .B(_068_),
    .Y(_027_)
  );
  OAI21X1 _159_ (
    .A(count[2]),
    .B(_049_),
    .C(count[3]),
    .Y(_069_)
  );
  AOI21X1 _160_ (
    .A(_050_),
    .B(_069_),
    .C(_055_),
    .Y(_026_)
  );
  XNOR2X1 _161_ (
    .A(count[2]),
    .B(_048_),
    .Y(_070_)
  );
  OAI21X1 _162_ (
    .A(_051_),
    .B(_070_),
    .C(_090_),
    .Y(_025_)
  );
  NAND2X1 _163_ (
    .A(count[1]),
    .B(count[0]),
    .Y(_071_)
  );
  AOI21X1 _164_ (
    .A(_049_),
    .B(_071_),
    .C(_055_),
    .Y(_024_)
  );
  NOR2X1 _165_ (
    .A(count[0]),
    .B(_055_),
    .Y(_023_)
  );
  INVX1 _166_ (
    .A(rst),
    .Y(_001_)
  );
  INVX1 _167_ (
    .A(rst),
    .Y(_002_)
  );
  INVX1 _168_ (
    .A(rst),
    .Y(_003_)
  );
  INVX1 _169_ (
    .A(rst),
    .Y(_004_)
  );
  INVX1 _170_ (
    .A(rst),
    .Y(_005_)
  );
  INVX1 _171_ (
    .A(rst),
    .Y(_006_)
  );
  INVX1 _172_ (
    .A(rst),
    .Y(_007_)
  );
  INVX1 _173_ (
    .A(rst),
    .Y(_008_)
  );
  INVX1 _174_ (
    .A(rst),
    .Y(_009_)
  );
  INVX1 _175_ (
    .A(rst),
    .Y(_010_)
  );
  INVX1 _176_ (
    .A(rst),
    .Y(_011_)
  );
  INVX1 _177_ (
    .A(rst),
    .Y(_012_)
  );
  INVX1 _178_ (
    .A(rst),
    .Y(_013_)
  );
  INVX1 _179_ (
    .A(rst),
    .Y(_014_)
  );
  INVX1 _180_ (
    .A(rst),
    .Y(_015_)
  );
  INVX1 _181_ (
    .A(rst),
    .Y(_016_)
  );
  INVX1 _182_ (
    .A(rst),
    .Y(_017_)
  );
  INVX1 _183_ (
    .A(rst),
    .Y(_018_)
  );
  INVX1 _184_ (
    .A(rst),
    .Y(_019_)
  );
  INVX1 _185_ (
    .A(rst),
    .Y(_020_)
  );
  INVX1 _186_ (
    .A(rst),
    .Y(_021_)
  );
  INVX1 _187_ (
    .A(rst),
    .Y(_022_)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _188_ (
    .CLK(clk),
    .D(_023_),
    .Q(count[0]),
    .R(_000_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _189_ (
    .CLK(clk),
    .D(_024_),
    .Q(count[1]),
    .R(_001_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _190_ (
    .CLK(clk),
    .D(_025_),
    .Q(count[2]),
    .R(_002_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _191_ (
    .CLK(clk),
    .D(_026_),
    .Q(count[3]),
    .R(_003_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _192_ (
    .CLK(clk),
    .D(_027_),
    .Q(count[4]),
    .R(_004_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _193_ (
    .CLK(clk),
    .D(_028_),
    .Q(P[0]),
    .R(_005_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _194_ (
    .CLK(clk),
    .D(_029_),
    .Q(P[1]),
    .R(_006_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _195_ (
    .CLK(clk),
    .D(_030_),
    .Q(P[2]),
    .R(_007_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _196_ (
    .CLK(clk),
    .D(_031_),
    .Q(P[3]),
    .R(_008_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _197_ (
    .CLK(clk),
    .D(_032_),
    .Q(P[4]),
    .R(_009_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _198_ (
    .CLK(clk),
    .D(_033_),
    .Q(P[5]),
    .R(_010_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _199_ (
    .CLK(clk),
    .D(_034_),
    .Q(P[6]),
    .R(_011_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _200_ (
    .CLK(clk),
    .D(_035_),
    .Q(P[7]),
    .R(_012_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _201_ (
    .CLK(clk),
    .D(_036_),
    .Q(product[0]),
    .R(_013_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _202_ (
    .CLK(clk),
    .D(_037_),
    .Q(product[1]),
    .R(_014_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _203_ (
    .CLK(clk),
    .D(_038_),
    .Q(product[2]),
    .R(_015_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _204_ (
    .CLK(clk),
    .D(_039_),
    .Q(product[3]),
    .R(_016_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _205_ (
    .CLK(clk),
    .D(_040_),
    .Q(product[4]),
    .R(_017_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _206_ (
    .CLK(clk),
    .D(_041_),
    .Q(product[5]),
    .R(_018_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _207_ (
    .CLK(clk),
    .D(_042_),
    .Q(product[6]),
    .R(_019_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _208_ (
    .CLK(clk),
    .D(_043_),
    .Q(product[7]),
    .R(_020_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _209_ (
    .CLK(clk),
    .D(_044_),
    .Q(done),
    .R(_021_),
    .S(1'h1)
  );
  (* src = "booth_multiplier.v:15.5-42.8" *)
  DFFSR _210_ (
    .CLK(clk),
    .D(_045_),
    .Q(P[8]),
    .R(_022_),
    .S(1'h1)
  );
  assign { A[4:3], A[1:0] } = 4'h0;
  assign { S[4:3], S[1:0] } = 4'h0;
endmodule
